Joshua Burkhart
1/16/2012
Dr. John Connery
CIS 455/555

-------------------------------------------------------------
Write a one-page description of what you did for this project
-------------------------------------------------------------

For this project I modified the given source code in a way such that the master process prints "I'm in a place called vertigo" following the for loop in which it sends messages to the slaves. Each slave receives the message sent by the master, pushes to stdout, and sends "yeah" back to the master. The master enters another for loop in which it listens for messages returned by the slaves, pushing each message to stout as it receives them. I added a call to MPI_Barrier prior to each slave's send and the master's listening loop. The barrier synchronizes the slaves, allowing time for their messages to print.

*Notice that the sending of each individual "yeah" message sent by the slaves to the master is asynchronous.

-----------------------------------------------------------------
Are the strings always printed in the same order? Why or why not?
-----------------------------------------------------------------

Because of the call to MPI_Barrier, the master (usually) prints its strings ("I'm at a place called vertigo" and "yeah" strings) after the slaves' strings (spanish numbers and "!" strings) are printed. The flaw in this program is the slaves' use of cout. In order to assure the order of printed messages, they should all be printed by a single process. Because of the asynchronous use of cout, a slave's message may not print to stdout until after it has passed its barrier and sent its "yeah" string to the master.

---------------------------------------------------------------------------------------------------------------------------------
Why aren't the individual messages garbled? E.g. is it possible that during some future run the output might include the line [â€¦]
---------------------------------------------------------------------------------------------------------------------------------

Each process (the master and each slave) have their own private stream buffers, and should each print to stdout atomically (one private stream buffer at a time). This does not assure that the private stream buffers are printed to the screen in any specific order.
